Notes for the conversion of Chen-Sherman's model in PharmML
===========

The human-readable pieces are translated to PharmML via the 
http://infix2pharmml.sourceforge.net service.



Heaviside function
--------


```
heavx(x):= (abs(x)+x)/(2*abs(x)+1e-5)

<ct:FunctionDefinition symbId="heavx" symbolType="real">
  <ct:Description>Function: heavx</ct:Description>
  <ct:FunctionArgument symbId="x" symbolType="real"/>
  <ct:Definition>
    <math:Equation>
      <math:Binop op="divide">
        <math:Binop op="plus">
          <math:Uniop op="abs">
            <ct:SymbRef symbIdRef="x"/>
          </math:Uniop>
          <ct:SymbRef symbIdRef="x"/>
        </math:Binop>
        <math:Binop op="plus">
          <math:Binop op="times">
            <ct:Real>2</ct:Real>
            <math:Uniop op="abs">
              <ct:SymbRef symbIdRef="x"/>
            </math:Uniop>
          </math:Binop>
          <ct:Real>1e-5</ct:Real>
        </math:Binop>
      </math:Binop>
    </math:Equation>
  </ct:Definition>
</ct:FunctionDefinition>
```



Modulus function
--------

PharmML has the `rem()` function. In case it does not accept
real-valued arguments, the following can be used.

```
modulus(a,b):=a-b*floor(a/b)

<ct:FunctionDefinition symbId="modulus" symbolType="real">
  <ct:Description>Function: modulus</ct:Description>
  <ct:FunctionArgument symbId="a" symbolType="real"/>
  <ct:FunctionArgument symbId="b" symbolType="real"/>
  <ct:Definition>
    <math:Equation>
      <math:Binop op="minus">
        <ct:SymbRef symbIdRef="a"/>
        <math:Binop op="times">
          <ct:SymbRef symbIdRef="b"/>
          <math:Uniop op="floor">
            <math:Binop op="divide">
              <ct:SymbRef symbIdRef="a"/>
              <ct:SymbRef symbIdRef="b"/>
            </math:Binop>
          </math:Uniop>
        </math:Binop>
      </math:Binop>
    </math:Equation>
  </ct:Definition>
</ct:FunctionDefinition>



Voltage source
-------

A square source.

```

V:=Vrest + (Vburst - Vrest)*(heav(x=rem(t, tcycle)) - heav(x=rem(t,tcycle) - toff))

<!-- V (Variable) --><ct:Variable symbId="V" symbolType="real">
  <ct:Description>Variable V</ct:Description>
  <ct:Assign>
    <math:Equation>
      <math:Binop op="plus">
        <ct:SymbRef symbIdRef="Vrest"/>
        <math:Binop op="times">
          <math:Binop op="minus">
            <ct:SymbRef symbIdRef="Vburst"/>
            <ct:SymbRef symbIdRef="Vrest"/>
          </math:Binop>
          <math:Binop op="minus">
            <math:FunctionCall>
              <ct:SymbRef symbIdRef="heav"/>
              <math:FunctionArgument symbId="x">
                <math:Equation>
                  <math:Binop op="rem">
                    <ct:SymbRef symbIdRef="t"/>
                    <ct:SymbRef symbIdRef="tcycle"/>
                  </math:Binop>
                </math:Equation>
              </math:FunctionArgument>
            </math:FunctionCall>
            <math:FunctionCall>
              <ct:SymbRef symbIdRef="heav"/>
              <math:FunctionArgument symbId="x">
                <math:Equation>
                  <math:Binop op="minus">
                    <math:Binop op="rem">
                      <ct:SymbRef symbIdRef="t"/>
                      <ct:SymbRef symbIdRef="tcycle"/>
                    </math:Binop>
                    <ct:SymbRef symbIdRef="toff"/>
                  </math:Binop>
                </math:Equation>
              </math:FunctionArgument>
            </math:FunctionCall>
          </math:Binop>
        </math:Binop>
      </math:Binop>
    </math:Equation>
  </ct:Assign>
</ct:Variable>

```


